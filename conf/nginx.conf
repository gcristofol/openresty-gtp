worker_processes  1;



error_log /dev/stdout info;
daemon off;


env ENV_USER=usman.tahir@vista.co;
env ENV_PASSWORD=vgpgtp123;

events {
    worker_connections 1024;
}

http {

	lua_package_path "./lua/?.lua;;";

	lua_shared_dict cache 10m;
	access_log /dev/stdout;
   
        init_by_lua_block {
		redis = require "resty.redis"
		cjson = require("cjson") -- cjson is a global variable
		crypto = require("crypto")
	}

    server {
		
	listen 5000;
	

	


	location /nginx_dict {
         default_type 'text/plain';

         # try access /nginx_dict?username=bob&token=foo
         content_by_lua_block {
			local function isempty(s)
			  return s == nil or s == ''
			end

			local cache = ngx.shared.cache
			if isempty(ngx.var.arg_token) then
				ngx.say(cache:get_keys())
				
			else
				local username = ngx.var.arg_username
				local token = ngx.var.arg_token
				
				cache:set(token, username)
				cache:set(token .. token, username .. username)
				
				ngx.say("cache dict populated")
            end
         }
     }

	location /nginx_env {
         # MIME type determined by default_type:
         default_type 'text/plain';

         # try access /nginx_var?a=hello,world
         content_by_lua_block {
             ngx.say(os.getenv ('ENV_USER'))
         }
     }

		location /get_token {
			client_max_body_size 100k;
			client_body_buffer_size 100k;

			access_by_lua_block {
				ngx.req.set_header("Content-Type", "application/x-www-form-urlencoded")
				ngx.log(ngx.WARN, "USER " .. os.getenv ('ENV_USER'))
				ngx.log(ngx.WARN, "PASSWORD " .. os.getenv ('ENV_PASSWORD'))
				local body = "username=" .. os.getenv ('ENV_USER') .. "&password=" .. os.getenv ('ENV_PASSWORD') .. "&grant_type=password&client_id=mx-transact-postman"
				local res = ngx.location.capture("/connect/token",
				 { method = ngx.HTTP_POST, body = body })
				 
				--local cjson = require "cjson"
				value = cjson.decode(res.body)
				ngx.say(res.body)
				
				local cache = ngx.shared.cache
                cache:set("Token", value.access_token)
				
				ngx.log(ngx.WARN, "SET VARIABLE ")
			}

		 }


		location /connect/token {
			internal;
			
		    #	resolver 127.0.0.53;
		    #	resolver_timeout          10s;
			#set $backend_upstream "https://staging-auth.moviexchange.com:80";
			#proxy_pass $backend_upstream/connect/token;
			proxy_pass https://staging-auth.moviexchange.com/connect/token;
		}


		location /nginx_var {
			
				#local cache = ngx.shared.cache
				#return "Bearer " .. cache:get("Token")
			set_by_lua $my_var '
			
				return "banana"
			 ';
			
			echo "sum = $my_var";
			#proxy_pass http://staging1.australiasoutheast.cloudapp.azure.com:80;
			#proxy_set_header Authorization "Bearer $my_var";
			#proxy_set_header X-Custom-Referrer "somevalue";
		}
		
		location /nginx_redis {
            content_by_lua_block {
                
                local red = redis:new()
                
                             -- or connect to a unix domain socket file listened
                -- by a redis server:
                --     local ok, err = red:connect("unix:/path/to/redis.sock")

                local ok, err = red:connect("127.0.0.1", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                ok, err = red:set("dog", "an animal")
                if not ok then
                    ngx.say("failed to set dog: ", err)
                    return
                end

                ngx.say("set result: ", ok)

                local res, err = red:get("dog")
                if not res then
                    ngx.say("failed to get dog: ", err)
                    return
                end

                if res == ngx.null then
                    ngx.say("dog not found.")
                    return
                end

                ngx.say("dog: ", res)

            }
        }

	location /nginx_base64 {
            content_by_lua_block {
				local memoize1 = require 'memoize'
            
               local s = memoize1()
            
               local newstr = ngx.encode_base64("polla")
                 
                ngx.say("foo: " .. s .. ' ' .. newstr)

            }
        }
        
        location /nginx_hmac {
            content_by_lua_block {

            
				access_key = "lalala"
				secret_key = "fufufu"
				local hash = crypto.hmac.digest("sha256", "full payload URL to be hashed", "key")
				
				
                ngx.say("foo: " .. hash)

            }
        }

    }
}
